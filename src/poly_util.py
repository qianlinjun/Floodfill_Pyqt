import os
import cv2
import json
import math
import numpy as np
from shapely.geometry import Polygon

def get_iou(poly1, poly2):
    '''
    poly1: 多边形
    poly2: 多边形

    '''
    polygon1 = Polygon(poly1)
    polygon2 = Polygon(poly2)
    inter_area = polygon1.intersection(polygon2).area  #相交面积
    union_area = polygon1.area + polygon2.area - inter_area
    return inter_area*1.0/union_area

def hu_moments(poly1, poly2):
    '''
    找到两个形状之间的相似性
    '''
    # 函数返回值代表相似度大小，完全相同的图像返回值是0，返回值最大是1
    # https://www.cnblogs.com/farewell-farewell/p/6004313.html第三个参数
    value = cv.matchShapes(poly1, poly2,  0, 0.0)
	# if value < min_value:
	# 	min_value = value
	# 	min_pos = i

if __name__ ==  "__main__":
    # poly1 = [[284, 485], [283, 486], [274, 486], [273, 487], [264, 487], [263, 488], [263, 489], [265, 489], [266, 490], [275, 490], [276, 491], [283, 491], [284, 492], [290, 492], [291, 493], [295, 493], [296, 494], [300, 494], [301, 495], [304, 495], [305, 496], [308, 496], [309, 497], [313, 497], [314, 498], [317, 498], [318, 499], [321, 499], [322, 500], [325, 500], [326, 501], [329, 501], [330, 502], [333, 502], [334, 503], [337, 503], [338, 504], [341, 504], [342, 505], [345, 505], [346, 506], [348, 506], [349, 507], [352, 507], [353, 508], [355, 508], [356, 509], [359, 509], [360, 510], [367, 510], [368, 509], [369, 509], [370, 508], [371, 508], [372, 507], [373, 507], [374, 506], [375, 506], [377, 504], [378, 504], [379, 503], [380, 503], [382, 501], [383, 501], [385, 499], [386, 499], [387, 498], [388, 498], [389, 497], [389, 496], [374, 496], [373, 495], [370, 495], [369, 494], [366, 494], [365, 493], [362, 493], [361, 492], [358, 492], [357, 491], [353, 491], [352, 490], [348, 490], [347, 489], [338, 489], [337, 490], [329, 490], [328, 491], [327, 490], [318, 490], [317, 489], [312, 489], [311, 488], [308, 488], [307, 487], [305, 487], [304, 486], [301, 486], [300, 485]]
    # poly2 = [[544, 447], [543, 448], [517, 448], [516, 449], [513, 449], [512, 450], [508, 450], [507, 451], [504, 451], [503, 452], [499, 452], [498, 453], [494, 453], [493, 454], [491, 454], [490, 455], [489, 455], [488, 456], [487, 456], [486, 457], [485, 457], [484, 458], [483, 458], [482, 459], [481, 459], [479, 461], [478, 461], [477, 462], [476, 462], [475, 463], [474, 463], [473, 464], [472, 464], [471, 465], [470, 465], [468, 467], [467, 467], [466, 468], [465, 468], [464, 469], [463, 469], [462, 470], [461, 470], [460, 471], [459, 471], [458, 472], [456, 472], [455, 473], [454, 473], [453, 474], [452, 474], [451, 475], [450, 475], [449, 476], [448, 476], [447, 477], [445, 477], [444, 478], [443, 478], [442, 479], [441, 479], [440, 480], [439, 480], [438, 481], [436, 481], [435, 482], [434, 482], [433, 483], [432, 483], [431, 484], [430, 484], [429, 485], [428, 485], [427, 486], [425, 486], [424, 487], [421, 487], [420, 488], [416, 488], [415, 489], [412, 489], [411, 490], [408, 490], [407, 491], [403, 491], [402, 492], [399, 492], [398, 493], [395, 493], [394, 494], [392, 494], [390, 496], [389, 496], [387, 498], [386, 498], [385, 499], [384, 499], [382, 501], [381, 501], [379, 503], [378, 503], [377, 504], [376, 504], [374, 506], [373, 506], [371, 508], [370, 508], [369, 509], [368, 509], [368, 510], [389, 510], [390, 511], [405, 511], [406, 510], [415, 510], [416, 509], [420, 509], [421, 508], [425, 508], [426, 507], [430, 507], [431, 506], [435, 506], [436, 505], [437, 505], [438, 504], [440, 504], [441, 503], [442, 503], [443, 502], [444, 502], [445, 501], [446, 501], [447, 500], [448, 500], [449, 499], [450, 499], [451, 498], [452, 498], [453, 497], [454, 497], [456, 495], [457, 495], [458, 494], [459, 494], [460, 493], [461, 493], [462, 492], [463, 492], [464, 491], [465, 491], [466, 490], [467, 490], [468, 489], [469, 489], [470, 488], [471, 488], [472, 487], [473, 487], [474, 486], [475, 486], [477, 484], [478, 484], [479, 483], [480, 483], [481, 482], [483, 482], [484, 481], [485, 481], [486, 480], [488, 480], [489, 479], [490, 479], [491, 478], [492, 478], [493, 477], [495, 477], [497, 475], [499, 475], [500, 474], [501, 474], [502, 473], [504, 473], [505, 472], [506, 472], [507, 471], [509, 471], [510, 470], [511, 470], [512, 469], [514, 469], [515, 468], [516, 468], [517, 467], [519, 467], [520, 466], [521, 466], [522, 465], [523, 465], [524, 464], [526, 464], [528, 462], [529, 462], [530, 461], [531, 461], [532, 460], [533, 460], [534, 459], [535, 459], [536, 458], [537, 458], [538, 457], [539, 457], [540, 456], [541, 456], [542, 455], [543, 455], [544, 454], [545, 454], [546, 453], [547, 453], [548, 452], [549, 452], [551, 450], [552, 450], [553, 449], [554, 449], [555, 448], [556, 448], [556, 447]]
    filedir  = "C:\qianlinjun\graduate\gen_dem\output\img_with_mask\switz-100-points"

    json_file1 = os.path.join(filedir, "83_8.58592987_46.6606636.json")#"10_8.51592159_46.602951.json"
    json_file2 = os.path.join(filedir, "83_8.58592987_46.6606636.json")#"11_8.53155708_46.60886.json"
    point1_id = 8#1#8#0#4#3
    point2_id = 5#5#2#6#5#0

    poly_json1 = json.load(open(json_file1,'r'))
    poly_json2 = json.load(open(json_file2,'r'))

    poly1, poly2 = None, None
    for idx, polygon in enumerate(poly_json1):
        id_     = polygon["id"]
        if id_ == point1_id:
            poly1 = polygon["contour"]
            for idx, polygon in enumerate(poly_json2):
                id_     = polygon["id"]
                if id_ == point2_id:
                    poly2 = polygon["contour"]
    if poly1 is not None and poly2 is not None:
        poly1 = np.array(poly1).squeeze()
        poly2 = np.array(poly2).squeeze()
        print(cv2.matchShapes(poly1, poly2,  2, 0.0))
        # hu = cv2.HuMoments( m ) hu 表示返回的Hu 矩阵，参数m 是cv2.moments() 
        m = cv2.moments(poly1) # m原始 mu 中心化 nu 归一化
        print(m["nu02"], m["nu20"])
        m = cv2.moments(poly2) # m原始 mu 中心化 nu 归一化
        print(m["nu02"], m["nu20"])
        mu11 = m["nu11"]
        mu02 = m["nu02"]
        mu20 = m["nu20"]
        angle = arctan(2*mu11/(mu20 - mu02))

        # print(cv2.HuMoments( m ))
        # m = cv2.moments(poly2)
        print(cv2.HuMoments( m ))
    elif poly1 is None:
        print("poly1 is None")
    elif poly2 is None:
        print("poly2 is None")


